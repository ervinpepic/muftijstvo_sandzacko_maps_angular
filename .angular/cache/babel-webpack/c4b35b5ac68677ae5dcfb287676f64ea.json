{"ast":null,"code":"/**\r\n * PriorityQueue\r\n * Elements in this queue are sorted according to their value\r\n *\r\n * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>\r\n * @copyright MIT\r\n */\n\n/**\r\n * PriorityQueue class construcotr\r\n * @constructor\r\n *\r\n * @example\r\n * queue: [1,2,3,4]\r\n * priorities: [4,1,2,3]\r\n * > result = [1,4,2,3]\r\n *\r\n * @param {Array} elements\r\n * @param {Array} priorities\r\n * @param {string} sorting - asc / desc\r\n * @returns {PriorityQueue}\r\n */\nfunction PriorityQueue(elements, priorities, sorting) {\n  /** @type {Array} */\n  this._queue = [];\n  /** @type {Array} */\n\n  this._priorities = [];\n  /** @type {string} */\n\n  this._sorting = 'desc';\n\n  this._init(elements, priorities, sorting);\n}\n\n;\n/**\r\n * Insert element\r\n *\r\n * @param {Object} ele\r\n * @param {Object} priority\r\n * @returns {undefined}\r\n * @access public\r\n */\n\nPriorityQueue.prototype.insert = function (ele, priority) {\n  var indexToInsert = this._queue.length;\n  var index = indexToInsert;\n\n  while (index--) {\n    var priority2 = this._priorities[index];\n\n    if (this._sorting === 'desc') {\n      if (priority > priority2) {\n        indexToInsert = index;\n      }\n    } else {\n      if (priority < priority2) {\n        indexToInsert = index;\n      }\n    }\n  }\n\n  this._insertAt(ele, priority, indexToInsert);\n};\n/**\r\n * Remove element\r\n *\r\n * @param {Object} ele\r\n * @returns {undefined}\r\n * @access public\r\n */\n\n\nPriorityQueue.prototype.remove = function (ele) {\n  var index = this._queue.length;\n\n  while (index--) {\n    var ele2 = this._queue[index];\n\n    if (ele === ele2) {\n      this._queue.splice(index, 1);\n\n      this._priorities.splice(index, 1);\n\n      break;\n    }\n  }\n};\n/**\r\n * For each loop wrapper\r\n *\r\n * @param {function} func\r\n * @returs {undefined}\r\n * @access public\r\n */\n\n\nPriorityQueue.prototype.forEach = function (func) {\n  this._queue.forEach(func);\n};\n/**\r\n * @returns {Array}\r\n * @access public\r\n */\n\n\nPriorityQueue.prototype.getElements = function () {\n  return this._queue;\n};\n/**\r\n * @param {number} index\r\n * @returns {Object}\r\n * @access public\r\n */\n\n\nPriorityQueue.prototype.getElementPriority = function (index) {\n  return this._priorities[index];\n};\n/**\r\n * @returns {Array}\r\n * @access public\r\n */\n\n\nPriorityQueue.prototype.getPriorities = function () {\n  return this._priorities;\n};\n/**\r\n * @returns {Array}\r\n * @access public\r\n */\n\n\nPriorityQueue.prototype.getElementsWithPriorities = function () {\n  var result = [];\n\n  for (var i = 0, l = this._queue.length; i < l; i++) {\n    result.push([this._queue[i], this._priorities[i]]);\n  }\n\n  return result;\n};\n/**\r\n * Set object properties\r\n *\r\n * @param {Array} elements\r\n * @param {Array} priorities\r\n * @returns {undefined}\r\n * @access protected\r\n */\n\n\nPriorityQueue.prototype._init = function (elements, priorities, sorting) {\n  if (elements && priorities) {\n    this._queue = [];\n    this._priorities = [];\n\n    if (elements.length !== priorities.length) {\n      throw new Error('Arrays must have the same length');\n    }\n\n    for (var i = 0; i < elements.length; i++) {\n      this.insert(elements[i], priorities[i]);\n    }\n  }\n\n  if (sorting) {\n    this._sorting = sorting;\n  }\n};\n/**\r\n * Insert element at given position\r\n *\r\n * @param {Object} ele\r\n * @param {number} index\r\n * @returns {undefined}\r\n * @access protected\r\n */\n\n\nPriorityQueue.prototype._insertAt = function (ele, priority, index) {\n  if (this._queue.length === index) {\n    this._queue.push(ele);\n\n    this._priorities.push(priority);\n  } else {\n    this._queue.splice(index, 0, ele);\n\n    this._priorities.splice(index, 0, priority);\n  }\n};\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = PriorityQueue;\n}","map":null,"metadata":{},"sourceType":"script"}