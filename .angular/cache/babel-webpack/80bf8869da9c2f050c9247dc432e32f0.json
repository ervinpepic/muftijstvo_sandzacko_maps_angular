{"ast":null,"code":"import { MarkerLabelAndIcons } from '../markers-styling/marker-label-icons';\nimport { infoWindowStyling } from '../markers-styling/markers-infoWindow-styling';\nexport class MarkerEvents {\n  constructor() {\n    this.markerLabelAndIcons = new MarkerLabelAndIcons();\n    this.inforObj = [];\n    this.infoWindowStyling = infoWindowStyling;\n  }\n\n  markerInfoWindow(marker, markerInfo, map) {\n    let infoWindow = new google.maps.InfoWindow();\n    marker.addListener(\"click\", () => {\n      this.closeOtherInfo();\n      this.markerBounce(marker);\n      infoWindow.setContent(this.infoWindowStyling(markerInfo));\n      infoWindow.open(map, marker);\n      this.inforObj[0] = infoWindow;\n      map.panTo(marker.getPosition());\n    });\n    infoWindow.addListener(\"closeclick\", () => {\n      map.panTo(marker.getPosition());\n      map.setZoom(map.getZoom() - 0.5);\n    });\n    map.addListener(\"click\", () => {\n      infoWindow.close();\n      marker.open = false;\n      map.setZoom(map.getZoom() - 0.9 / 1.8);\n    });\n  }\n\n  markerMouseOver(marker) {\n    marker.addListener(\"mouseover\", () => {\n      this.markerLabelAndIcons.markerMouseOver(marker);\n    });\n  }\n\n  markerMouseOut(marker) {\n    marker.addListener(\"mouseout\", () => {\n      this.markerLabelAndIcons.markerMouseOut(marker);\n    });\n  }\n\n  markerBounce(marker) {\n    if (marker.getAnimation() !== null) {\n      marker.setAnimation(null);\n    } else {\n      marker.setAnimation(google.maps.Animation.BOUNCE);\n      this.markerLabelAndIcons.markerIconClicked(marker);\n      setTimeout(function () {\n        marker.setAnimation(null);\n      }, 2000); // current maps duration of one bounce (v3.13)\n    }\n  }\n\n  closeOtherInfo() {\n    if (this.inforObj.length > 0) {\n      // detach the info window from the marker undocumented in google API\n      this.inforObj[0].set(\"marker\", null); // close it\n\n      this.inforObj[0].close(); // blank the array\n\n      this.inforObj.length = 0;\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}